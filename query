# get cluster health status
GET _cluster/health?pretty

# get list of nodes
GET _cat/nodes?v

# get list of shards
GET _cat/shards?v&s=shard

# get list of indices
GET _cat/indices?v&h=health,status,index,pri,rep,docs,count,store,size,pti.store.size

# get list and more details of indices
GET _cat/indices?v&s=index

# information about specific shard
GET _cat/shards/alert-idx?v&s=shard

# create index with alias, mapping and settings
PUT orders-2012-10-01
{
  "aliases": {
    "orders": {
      "is_write_index": true  
    }
  },
  "settings": {
    "index":{
      "number_of_shards":5,
      "number_of_replicas":1
    }
  },
  "mapping": {
    "properties": {
      "host_name": {
        "type": "keyword"
      },
      "created_at": {
        "type": "date",
        "format": "EEE MMM dd HH:mm:ss Z yyyy"
      }
    }
  }
}


# change all index mapping settings
PUT /*/_mapping
{
"dynamic": "strict"
  }
  
  
GET _cat/shards/alert-idx?v&s=shard



# create template
PUT _template/template_3
{
  "index_patterns": ["ze*", "zvbar*"],
  "settings": {
    "number_of_shards": 3,
    "number_of_replicas": 1
  },
  "mappings": {
      "properties": {
        "host_name": {
          "type": "keyword"
        },
        "namw": {
          "type": "keyword"
        }
      }
  }
}

# create document
POST /zeve1/_doc/1
{
  "host_name": "fdsf",
  "namw": "dsfd"
}

# get index settings
GET /zeve1/_settings

GET _search
{
  "query": {
    "match_all": {}
  }
}

# search index people1
GET /people1/_search
{
  "query": {
    "match_all": {}
  }
}

# get document by id
GET /people1/_doc/k5z2i34BRPzyx7egVn3-

# get index mapping
GET /people1/_mapping

# add alias to index
POST _aliases
{
  "actions": [
    {
      "add": {
        "index": "people1",
        "alias": "my-alias"
      }
    }
  ]
}

# reindex from src to destination
POST _reindex
{
  "source": {
    "index": "user-000001"
  },
  "dest": {
    "index": "user-000002"
  }
}

# get document by id using alias
GET /my-alias/_doc/k5z2i34BRPzyx7egVn3-

# get template information
GET /_template/template_2

# get all index template
GET /_index_template

# this command show disk usage for each field
POST /people1/_disk_usage?run_expensive_tasks=true


POST .monitoring-logstash-*/_search
{
  "size": 0,
  "aggs": {
    "clusters": {
      "terms": {
        "field": "cluster_uuid",
        "size": 10
      },
      "aggs": {
        "types": {
          "terms": {
            "field": "type",
            "size": 10
          },
          "aggs": {
            "first": {
              "min": {
                "field": "timestamp"
              }
            },
            "last": {
              "max": {
                "field": "timestamp"
              }
            }
          }
        }
      }
    }
  }
}



GET _cat/indices/.monitoring-*

POST my-index-000001/_doc/
{
  "@timestamp": "2099-11-15T13:12:00",
  "message": "GET /search HTTP/1.1 200 1070000",
  "user": {
    "id": "kimchy"
  }
}

GET _cat/indices/people1

POST /people1/_doc/1
{
  "name": "fdsf",
  "sssd": "dsfd"
}

# delete index
DELETE my-index-000001
# cluster info
GET /_cluster/health?pretty
GET /_cluster/health?wait_for_status=yellow&timeout=50s
GET _cat/health?v
GET _cluster/health?level=indices
GET /_cluster/state
GET /_cluster/stats?human&pretty
GET /_cluster/pending_tasks
GET _cat/pending_tasks?v
GET /_nodes
GET /_cat/nodes?v
GET /_cat/master?v
GET /_nodes/stats
GET /_cat/nodes?h=ip,name,version&v
GET /_nodes/nodeId1,nodeId2/stats
GET /_cat/nodes?v&h=id,ip,port,v,m
GET /_cat/segments?v
GET _cluster/allocation/explain?pretty


# Get unassigned shards : 
GET _cat/shards?h=index,shard,prirep,state,unassigned.reason&s=index&state=UNASSIGNED
# Get unassigned shards with reason : 
GET _cat/shards?v=true&h=index,shard,prirep,state,node,unassigned.reason&s=state
# Get unassigned shards with reason for specific index: 
GET _cat/shards/.ds-cos-endpoint-2023.08.25-000088?v=true&h=index,shard,prirep,state,node,unassigned.reason&s=state

# tasks in elastic
GET _cat/tasks?v
GET _tasks/oenUCsllsadwqdwqc:59588341

# flush to disk
POST _flush/synced



# get cluster settings
GET /_cluster/settings?include_defaults=true&flat_settings=true

# Updating cluster settings
PUT /_cluster/settings
{
    "transient" : {
        "cluster.routing.allocation.enable" : "all"
    }
}

# cluster health : index level 
GET /_cluster/health?level=indices&pretty
GET _cat/indices?v
GET _cat/indices/index-name?v
# show only index name
GET _cat/indices/index-name?v&h=index
GET _cat/indices/indexname*?v&s=index:desc&h=docs.count
GET _cat/indices/indexname*?v&s=index:desc&h=index,docs.count
GET _cat/indices/test?h=*&format=json

# cluster health : shards level 
GET /_cluster/health?level=shards&pretty
# get shards per index
GET _cat/shards/indexname?v

# get shards allocation per node
GET _cat/allocation?v


# get recovery status
GET _cat/recovery?v

# List All Indices
GET /_cat/indices?v
GET /appindex1/_count

# Create an Index with setting and mapping
PUT /index_name
{
  "settings": {
    "number_of_shards": 1
  },
  "mappings": {
    "properties": {
      "field1": { "type": "text" }
    }
  }
}


# change number of replicas
PUT /indextest/_Settings
{
"settings": {
"index.number_of_replicas" : "3"      }
}

# Make index read_only : 
PUT /indextest/_Settings
{
"settings": {
"index.blocks.write": true
       }
}


# change number of shards 
POST /srcindextest/_split/target_index
{
"settings": {
"index.number_of_shards" : "3"
       }
}

# another example of Create an index with settings and mapping
PUT /my_index_name
{
  "settings": {
    "number_of_replicas": 1,
    "number_of_shards": 3,
    "analysis": {},
    "refresh_interval": "1s"
  },
  "mappings": {
    "dynamic": false,
    "properties": {
      "title": {
        "type": "text",
        "analyzer": "english"
      }
    }
  }
}

# Create a document (auto-generated ID)
POST /my_index_name/_doc
{
  "title": "Elastic is funny",
  "tag": [
    "lucene"
  ]
}

# Create or update a document
PUT /my_index_name/_doc/12
{
  "title": "Elastic is funny",
  "tag": [
    "lucene"
  ]
}

# Delete a document
DELETE /my_index_name/_doc/12

# Open and close indexes
POST /my_index_name/_close
POST /my_index_name/_open



# Get the mapping and the settings
GET /my_index_name
GET /my_index_name/_mapping
GET /my_index_name/_settings


# Delete an Index
DELETE /index_name

# Search match query
GET /index_name/_search
{
  "query": {
    "match": {
      "field": "value"
    }
  }
}


# Remove and create aliases
POST /_aliases
{
  "actions": [
    {
      "remove": {
        "index": "my_index_name",
        "alias": "foo"
      }
    },
    {
      "add": {
        "index": "my_index_name",
        "alias": "bar",
        "filter" : { "term" : { "user" : "damien" } }
      }
    }
  ]
}

# add alias to indices by pattern : 
POST /_aliases
{
"actions": [
{
"add": {
"index": "logs-vend-2022-11*"
"alias": "vend"
}
}
 ]
}

# List aliases
GET /_aliases
GET /my_index_name/_alias/*


# Indices monitoring
GET /my_index_name/_stats
GET /my_index_name/_segments
GET /my_index_name/_recovery?pretty&human
GET /_cat/recovery?active_only=true&v&h=index,time,source_node,target_node,bytes,bytes_recovered,bytes_percent,bytes_total,translog_ops_percent
GET /_cat/recovery?active_only=true


# Indices manage
POST /my_index_name/_cache/clear
POST /my_index_name/_refresh
POST /my_index_name/_flush
POST /my_index_name/_forcemerge

# ilm operation
POST _ilm/stop 
POST _ilm/start 
GET _ilm/status
GET indexname/_ilm/explain

PUT /index_name/_settings
{
"index": {
"lifecycle.name": "logs-main-policy",
"lifecycle.rollover_alias": "index_name"
       }
}

# move ILM from HOT to frozen-tier :
POST ilm/move/index_name
{
"current_step": {
"phase" : "hot",
             "action": "rollover",
             "name": "check-rollover-ready"
        },
"next_step": {
"phase": "frozen"
 }
}

# Reroute Data betweem data tier : 
PUT indexname/_settings
{
"index.routing.allocation.include._tier_preference": "data_cold,data_warm,data_hot"
}

# stop and start and status slm (snapshot lifecycle mangment)
POST /_slm/stop
POST /_slm/start
GET _slm/status

# check how many deleted documents per segment
GET /_cat/segments/indexname?v=true


# Reindex
POST /_reindex
{
  "source": {
    "index": "test-index"
  },
  "dest": {
    "index": "test-index-new"
  }
}


# Selective Reindex Operation
POST /_reindex
{
  "source": {
    "index": "test-index",
    "query": {
      "match": {
        "gender": "female"
      }
    }
  },
  "dest": {
    "index": "test-index-new",
    "type": "female"
  }
}

# reindex data with change name of index
POST _reindex/?wait_for_completion=false
{
  "source": {
    "index" : "aviad-t*"
  },
  "dest": {
    "index" : "%{[@metadata]{index]}"
  }
  , "script": {
    "lang": "painless",
    "source": "ctx._index = ctx._index + '-fix'"
  }
}

# basic search all on index
get /index_name/_search
{
  "query": {
       "match_all": {}
}
}

# Searches multiple fields
GET /index_name/_search
{
  "query": {
    "multi_match": {
      "query": "value",
      "fields": ["field1", "field2"]
    }
  }
}

# Range Query
GET /index_name/_search
{
  "query": {
    "range": {
      "date": {
        "gte": "2021-01-01",
        "lte": "2021-12-31"
      }
    }
  }
}


# Fuzzy Search - Allows for typos and misspellings.
GET /index_name/_search
{
  "query": {
    "fuzzy": {
      "field": "value"
    }
  }
}

# Prefix Search
GET /index_name/_search
{
  "query": {
    "prefix": {
      "field": "value"
    }
  }
}

# Wildcard Search
GET /index_name/_search
{
  "query": {
    "wildcard": {
      "field": "val*"
    }
  }
}


# Count Documents in an Index
GET /index_name/_count


# Basic Aggregation
GET /index_name/_search
{
  "size": 0,
  "aggs": {
    "field_name": {
      "terms": { "field": "field_name" }
    }
  }
}

# Date Histogram Aggregation
GET /index_name/_search
{
  "aggs": {
    "sales_over_time": {
      "date_histogram": {
        "field": "date",
        "interval": "month"
      }
    }
  }
}


# backup and restore
GET _cat/repositories?v

GET _snapshot/repository-name?pretty

#create a snapshot for index
PUT _snapshot/repository-name/mysnapshot_name?wait_for_completion=true&pretty=true
{
	"indices": "indexname", 
	"ignore_unavailable": true, 
	"include_global_state": false
}

# Verify the Snapshot
GET _cat/snapshots/repository-name?v&s=id

# Get the Metadata of the Snapshot: 
GET _snapshot/repository-name/mysnapshot_name?pretty


# restore shanpshot of index
POST _snapshot/repository-name/mysnapshot_name/_restore
{
  "indices": "indexname",
  "ignore_unavailable": true,
  "include_global_state": false,
  "rename_pattern": "index_(.+)",
  "rename_replacement": "restored_index_$1"
}

# change create date of index (for ArchiveData) ,  to calculate epoc time 
PUT indexname-2022.01.01/_settings

{  "index.lifecycle.origination_date" : "epoctime(ms)" }

# example : 
PUT indexname-2022.01.01/_settings

{  "index.lifecycle.origination_date" : "1672693497000" }


{  "index.lifecycle.origination_date" : "1672693497000" }
